generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  nik       String?   @unique
  password  String
  nama      String
  emailVerified DateTime? 
  createdAt DateTime  @default(now())
  dokterId  String?   @map("dokter_id")
  role      Role      @default(PASIEN)
  updatedAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]
  Dokter    Dokter?   @relation(fields: [dokterId], references: [id], onDelete: Cascade)
  pasien    Pasien?   @relation(fields: [nik], references: [nik], onDelete: Cascade)

  @@map("users")
}
model VerificationToken {
  id String @id @default(cuid())
  email String
  token      String
  expires    DateTime
 
  @@unique([email, token])
  @@map("verification_tokens")
}

model Pasien {
  nik           String         @id
  nama          String
  golonganDarah GolonganDarah?
  tanggalLahir  DateTime?
  alamat        String?
  noHp          String?
  jenisKelamin  JenisKelamin?
  status        StatusPasien?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  User          User?

  Antrian Antrian[]

  Pemeriksaan Pemeriksaan[]
}

model Dokter {
  id           String       @id @default(cuid())
  nama         String
  nomorStr     String       @unique
  alamat       String
  statusDokter StatusDokter
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  User         User[]

  Pemeriksaan Pemeriksaan[]
}

model Obat {
  id          String       @id @default(cuid())
  nama        String
  stok        Int
  harga       Int
  golongan    GolonganObat
  deskripsi   String
  aturanPakai String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  ResepObat ResepObat[]
}
model ChatRoom {
  id String @id
  lastMessage String?
  lastChatRole ChatRole?
  nama String
  chats Chat[]
  unreadMessage Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Chat{
  id  String  @id @default(cuid())
  role  ChatRole
  message String
  userId String
  ChatRoom ChatRoom @relation(fields: [userId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}
model Jadwal {
  id String @id @default(cuid())
  jumlahAntrian Int
  tanggal DateTime
  statusKlinik StatusKlinik
  keteranganTutup String?
  Antrian Antrian[]
}
model Antrian {
  id String @id @default(cuid())
  noAntrian Int
  pasienNIK String
  jadwalId String
  keluhan String
  nama String
  statusAntrian StatusAntrian @default(MENUNGGU)
  jam String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  jadwal Jadwal @relation(fields: [jadwalId],references: [id],onDelete: Cascade)
  pasien Pasien @relation(fields: [pasienNIK],references: [nik],onDelete: Cascade)
}
model Pemeriksaan {
  id String @id @default(cuid())
  dokterId String
  dokter Dokter @relation(fields: [dokterId],references: [id],onDelete: Cascade)
  pasienNik String
  pasien Pasien @relation(fields: [pasienNik],references: [nik],onDelete: Cascade)
  diagnosis String
  detakJantung Int
  gulaDarah Int
  trombosit Int
  tekananDarahTDS Int
  tekananDarahTTD Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  resepObat ResepObat[]
  dibayar Boolean @default(false)
  totalHarga Int @default(0)

}
model ResepObat {
  id String @id @default(cuid())
  obatId String
  pemeriksaanId String @unique
  pemeriksaan Pemeriksaan @relation(fields: [pemeriksaanId],references: [id],onDelete: Cascade)
  obat Obat @relation(fields: [obatId],references: [id],onDelete: Cascade)
  jumlah Int
}
model Config {
  id String @id @default(cuid())
  key String
  value String
}
model JamBuka {
  id String @id @default(cuid())
  key Int
  startTime String
  endTime String
  jumlahAntrian Int @default(12)
  createdAt DateTime? @default(now())
}
enum StatusAntrian {
  MENUNGGU
  TIDAK_HADIR
  BATAL
  SEDANG_DIPERIKSA
  SELESAI_DIPERIKSA
}
enum StatusKlinik {
  TUTUP
  BUKA
}
enum ChatRole {
  user
  dokter
  assistant
}
enum Role {
  PASIEN
  DOKTER
  RESEPSIONIS
}

enum GolonganObat {
  BEBAS
  BEBAS_TERBATAS
  KERAS
  NARKOTIKA
  FITOMARKA
  JAMU
  HERBAL
}

enum GolonganDarah {
  A
  B
  AB
  O
}

enum JenisKelamin {
  LAKILAKI
  PEREMPUAN
}

enum StatusDokter {
  AKTIF
  CUTI
  PENSIUN
}

enum StatusPasien {
  MENIKAH
  LAJANG
}
